package access 
import scodec._, scodec.bits._

import com.twitter.util.{Future, Try}
trait Store[K, V]

import storage._ 
import Ops._

trait SimpleKV[K, V] {
  def get(k: K): Future[V]
  def put(k: K, v: V): Future[Unit]
  def delete(k: K): Future[Unit]
  def list: Future[List[K]]
}


object StringDict { 


  import utils.BV
  class Local[V](b: Bucket, valueCodec: Codec[V] ) extends SimpleKV[String, V] {


    def get(k: String): Future[V] = {
      val data = Future.const( util.optAsTry( KV.get( b, k.getBytes )  ) )
      data.map { v =>
        valueCodec.decode( BitVector(v) ).toOption.get.value
      }
    }



    def put(k: String, v: V): Future[Unit] = {
      val payload = util.optAsTry( valueCodec.encode(v).toOption )
      Future.const(payload) map {pl =>
        KV.put(b, k.getBytes, pl.toByteArray)
      }
    }


    def delete(k: String): Future[Unit] = Future.const{ KV.delete(b, k.getBytes) }

    def list: Future[ List[String] ] = Future.const { KV.list(b) }
  
  }

  import com.twitter.finagle.{Service, http}
  import http.{Request, Response, Method}


  class RemoteKV[V](b: String, valueCodec: Codec[V], conn: Service[Request, Response]) extends SimpleKV[String, V] {
    val prefix = "/api/v1/kv/"
    def put(k: String, v: V) = {
      val payload = util.optAsTry( valueCodec.encode(v).toOption )

      Future.const(payload) map { data =>
        val buf = BV.toBuf(data)
        //sanitize later
        val r = Request(Method.Post, (prefix + s"/$b/$key" ) )
        r.content(buf); r
      }.flatMap { req =>
        conn(req).map(rep => () )
      }

    }



    def get(k: String   ): Future[V
  }



} 
